name: Intall, build and test
run-name: ${{ github.actor }} Intall, build and test
on: [push]
jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name : Checkout
  #       uses: actions/checkout@v3
      
  #     - name: Get npm cache directory
  #       id: npm-cache-dir
  #       shell: bash
  #       run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      
  #     - name : Node module caching
  #       uses: actions/cache@v3
  #       id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
  #       with:
  #         path: | 
  #           ./node_modules
  #           /home/runner/.cache/Cypress
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-
      
  #     - name : Installation des dÃ©pendances
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run : npm install
  #     - name : Build
  #       run : npm run build
  
  # test:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name : Checkout
  #       uses: actions/checkout@v3

  #     - name: Get npm cache directory
  #       id: npm-cache-dir
  #       shell: bash
  #       run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

  #     - name : Node module caching
  #       uses: actions/cache@v3
  #       id: npm-cache
  #       with:
  #         path: |
  #           ./node_modules
  #           /home/runner/.cache/Cypress
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-

  #     - name: Test e2e
  #       run : npm run e2e:headless

  #     - name: Archive test video
  #       uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: Video e2e
  #         path: |
  #           cypress/videos/*.mp4

  deploy:
    runs-on: ubuntu-latest
    #needs: [build, test]
    steps:
      - name: prepare client
        run : sudo apt-get install -y openssh-client

      - name: prepare key
        run : |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVEUR_IP }} > ~/.ssh/known_hosts

      - name: connect, clone and launch
        run : |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVEUR_IP }} "'if [ -d "~/devops/" ]; then rm -Rf ~/devops/; fi'"
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVEUR_IP }} "git clone git@github.com:LeauHic/TestDevops.git devops"
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVEUR_IP }} "cd devops"
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVEUR_IP }} "npm run build"
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVEUR_IP }} "npm run start &"