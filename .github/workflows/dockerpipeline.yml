name: Build and Push Docker Image
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name : Checkout
        uses: actions/checkout@v3
      
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      
      - name : Node module caching
        uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: | 
            ./node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name : Installation des dÃ©pendances
        if: steps.cache.outputs.cache-hit != 'true'
        run : npm install
      - name : Build
        run : npm run build
  
  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name : Checkout
        uses: actions/checkout@v3

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name : Node module caching
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Test e2e
        run : npm run e2e:headless

      - name: Archive test video
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Video e2e
          path: |
            cypress/videos/*.mp4

  build_image:
    runs-on: ubuntu-latest
    needs: [build, test]
    environment: production
    permissions:
        contents: read
        packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to container registry
        uses: docker/login-action@v1
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        run: |
            echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
            OWNER: '${{ github.repository_owner }}'

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{env.OWNER_LC}}/nexttest:latest

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build_image]
  #   steps:
  #      - name: Checkout repository
  #        uses: actions/checkout@v2

  #      - name: set lower case owner name
  #        run: |
  #            echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
  #        env:
  #           OWNER: '${{ github.repository_owner }}'

  #      - name: prepare client
  #        run : sudo apt-get install -y openssh-client

  #      - name: prepare key
  #        uses: webfactory/ssh-agent@v0.7.0
  #        with:
  #          ssh-private-key: ${{ secrets.SSH_KEY }}   
  #      - name: connect, clone and launch
  #        run : |
  #          scp -o StrictHostKeyChecking=no ./docker-compose.production.yaml ubuntu@${{ secrets.SERVEUR_IP }}:~/docker-compose.yaml
  #          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVEUR_IP }} 'bash -i -c "sudo docker login ${{ secrets.GIT_URL }} -u ${{ github.actor }} -p${{ secrets.GITHUB_TOKEN }} && sudo docker-compose pull && sudo docker-compose up -d --force-recreate"'